%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 73 35 539 756
%%HiResBoundingBox: 73.000000 35.500000 539.000000 756.000000
%%Creator: gEDA gschem 1.8.1-20121123
%%CreationDate: Mon May 20 09:59:17 2013
%%Title: /home/john/projects/boxcom/implement/boards/usb/reva/schematics/aux_power.sch
%%Author: john
%%EndComments
% EPSF created by ps2eps 1.68
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices
% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def
% Draw a dot
/dot {
    0 360 arc fill
} bind def
% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def
% Draw an arc segment
/darc {
    setlinewidth
    arc stroke
} bind def
% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall
    % Now draw it
    stroke
} bind def
% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     
% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def
% Font reincoding utilities
% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def
% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def
% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.
% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def
% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def
/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def
% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def
/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def
% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def
%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def
% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def
% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def
    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)
    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def
                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def
                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append
    grestore
    show
} bind def
% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def
/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars
    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont
    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text
	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def
%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 499 translate 90 rotate
0.588235 0.588235 scale
-39200 -39200 translate
gsave
39200 39200 56200 39200 10 line
56200 39200 56200 50200 10 line
56200 50200 39200 50200 10 line
39200 50200 39200 39200 10 line
51900 40000 51900 39400 10 line
gsave
false false false false 161.777776 [(FILE:) ] 0 48500 39800 144.444443 text
grestore
gsave
false false false false 161.777776 [(REVISION:) ] 0 52000 39800 144.444443 text
grestore
gsave
false false false false 161.777776 [(DRAWN BY: ) ] 0 52000 39500 144.444443 text
grestore
gsave
false false false false 161.777776 [(PAGE) ] 0 48500 39500 144.444443 text
grestore
gsave
false false false false 161.777776 [(OF) ] 0 50200 39500 144.444443 text
grestore
gsave
false false false false 161.777776 [(TITLE) ] 0 48500 40100 144.444443 text
grestore
48400 39400 56000 39400 10 line
56000 39400 56000 40800 10 line
56000 40800 48400 40800 10 line
48400 40800 48400 39400 10 line
48400 40000 56000 40000 10 line
39400 39400 56000 39400 10 line
56000 39400 56000 50000 10 line
56000 50000 39400 50000 10 line
39400 50000 39400 39400 10 line
39400 41200 39200 41200 10 line
39400 43200 39200 43200 10 line
39400 45200 39200 45200 10 line
39400 47200 39200 47200 10 line
41200 39400 41200 39200 10 line
43200 39400 43200 39200 10 line
45200 39400 45200 39200 10 line
47200 39400 47200 39200 10 line
49200 39400 49200 39200 10 line
gsave
true false true false 161.777776 [(A) ] 0 39300 40200 144.444443 text
grestore
gsave
true false true false 161.777776 [(B) ] 0 39300 42200 144.444443 text
grestore
gsave
true false true false 161.777776 [(C) ] 0 39300 44200 144.444443 text
grestore
gsave
true false true false 161.777776 [(D) ] 0 39300 46200 144.444443 text
grestore
gsave
true false true false 161.777776 [(1) ] 0 40200 39300 144.444443 text
grestore
gsave
true false true false 161.777776 [(2) ] 0 42200 39300 144.444443 text
grestore
gsave
true false true false 161.777776 [(3) ] 0 44200 39300 144.444443 text
grestore
gsave
true false true false 161.777776 [(4) ] 0 46200 39300 144.444443 text
grestore
gsave
true false true false 161.777776 [(5) ] 0 48200 39300 144.444443 text
grestore
39400 49200 39200 49200 10 line
gsave
true false true false 161.777776 [(E) ] 0 39300 48200 144.444443 text
grestore
gsave
true false true false 161.777776 [(F) ] 0 39300 49700 144.444443 text
grestore
51200 39400 51200 39200 10 line
53200 39400 53200 39200 10 line
gsave
true false true false 161.777776 [(6) ] 0 50200 39300 144.444443 text
grestore
gsave
true false true false 161.777776 [(7) ] 0 52200 39300 144.444443 text
grestore
gsave
true false true false 161.777776 [(8) ] 0 54200 39300 144.444443 text
grestore
55200 39400 55200 39200 10 line
gsave
true false true false 161.777776 [(9) ] 0 55700 39300 144.444443 text
grestore
56200 49200 56000 49200 10 line
56200 47200 56000 47200 10 line
56200 45200 56000 45200 10 line
56200 43200 56000 43200 10 line
56200 41200 56000 41200 10 line
gsave
true false true false 161.777776 [(A) ] 0 56100 40200 144.444443 text
grestore
gsave
true false true false 161.777776 [(B) ] 0 56100 42200 144.444443 text
grestore
gsave
true false true false 161.777776 [(C) ] 0 56100 44200 144.444443 text
grestore
gsave
true false true false 161.777776 [(D) ] 0 56100 46200 144.444443 text
grestore
gsave
true false true false 161.777776 [(E) ] 0 56100 48200 144.444443 text
grestore
gsave
true false true false 161.777776 [(F) ] 0 56100 49700 144.444443 text
grestore
41200 50200 41200 50000 10 line
43200 50200 43200 50000 10 line
45200 50200 45200 50000 10 line
47200 50200 47200 50000 10 line
49200 50200 49200 50000 10 line
51200 50200 51200 50000 10 line
53200 50200 53200 50000 10 line
55200 50200 55200 50000 10 line
gsave
true false true false 161.777776 [(1) ] 0 40200 50100 144.444443 text
grestore
gsave
true false true false 161.777776 [(2) ] 0 42200 50100 144.444443 text
grestore
gsave
true false true false 161.777776 [(3) ] 0 44200 50100 144.444443 text
grestore
gsave
true false true false 161.777776 [(4) ] 0 46200 50100 144.444443 text
grestore
gsave
true false true false 161.777776 [(5) ] 0 48200 50100 144.444443 text
grestore
gsave
true false true false 161.777776 [(6) ] 0 50200 50100 144.444443 text
grestore
gsave
true false true false 161.777776 [(7) ] 0 52200 50100 144.444443 text
grestore
gsave
true false true false 161.777776 [(8) ] 0 54200 50100 144.444443 text
grestore
gsave
true false true false 161.777776 [(9) ] 0 55700 50100 144.444443 text
grestore
grestore
gsave
false false false false 404.444448 [(Auxiliary power) ] 0 50800 40300 361.111115 text
grestore
gsave
false false false false 202.222224 [(4) ] 0 49400 39500 180.555557 text
grestore
gsave
false false false false 202.222224 [(6) ] 0 51000 39500 180.555557 text
grestore
gsave
false false false false 202.222224 [(aux_power.sch) ] 0 49900 39800 180.555557 text
grestore
gsave
false false false false 202.222224 [(John Peck) ] 0 53000 39500 180.555557 text
grestore
gsave
49000 45900 48600 45900 10 line
49000 45800 48600 45800 10 line
48800 46100 48800 45900 10 line
48800 45800 48800 45600 10 line
48800 46400 48800 46100 10 line
48800 45300 48800 45600 10 line
grestore
gsave
false false false false 202.222224 [(2.2u) ] 0 49100 45700 180.555557 text
grestore
gsave
false false false false 202.222224 [(C401) ] 0 49100 45900 180.555557 text
grestore
47500 46800 48800 46800 10 line
46600 45900 46600 45600 10 line
45700 45600 45700 45700 10 line
45700 45700 46600 45700 10 line
44900 44300 48800 44300 10 line
48800 44300 48800 45300 10 line
45700 44500 45700 44300 10 line
46600 44400 46600 44300 10 line
44900 43700 44900 45300 10 line
44600 46800 45700 46800 10 line
47700 46400 47700 46800 10 line
47700 45200 47700 44300 10 line
gsave
46000 47000 47200 47000 10 line
47200 47000 47200 46200 10 line
47200 46200 46000 46200 10 line
46000 46200 46000 47000 10 line
45700 46800 46000 46800 10 line
gsave
false false false false 202.222224 [(Vin) ] 0 46055 46795 180.555557 text
grestore
gsave
false true false false 202.222224 [(3) ] 0 45905 46845 180.555557 text
grestore
47500 46800 47200 46800 10 line
gsave
false true false false 202.222224 [(Vout) ] 0 47145 46795 180.555557 text
grestore
gsave
false false false false 202.222224 [(2) ] 0 47295 46845 180.555557 text
grestore
46600 45900 46600 46200 10 line
gsave
false false false false 202.222224 [(Set) ] 0 46455 46250 180.555557 text
grestore
gsave
false false false false 202.222224 [(1) ] 0 46445 46000 180.555557 text
grestore
47500 46500 47200 46500 10 line
gsave
false true false false 202.222224 [(Vout) ] 0 47145 46495 180.555557 text
grestore
gsave
false false false false 202.222224 [(4) ] 0 47295 46545 180.555557 text
grestore
grestore
gsave
false false false false 202.222224 [(lt3080est) ] 0 45995 47095 180.555557 text
grestore
gsave
false false false false 202.222224 [(U400) ] 0 45995 47295 180.555557 text
grestore
47500 46500 47700 46500 10 line
gsave
false false false false 202.222224 [(Vout = Rset x 10uA) ] 0 45900 44000 180.555557 text
grestore
gsave
false false false false 202.222224 [(Minimum load current for lt3080) (is 1mA \(maximum\).  Choose Rlmin) (to flow this current.) ] 0 46800 43300 180.555557 text
grestore
gsave
false false false false 202.222224 [(The AVR Butterfly board requires) (3.1V <= Vcc <= 4.5V, though the) (ATmega169PA can run on) (1.8V <= Vcc <= 5.5V.) ] 0 51000 47500 180.555557 text
grestore
gsave
false false false false 202.222224 [(lt3080 has a dropout) (voltage of 1.2V with) (100mA load.) ] 0 46000 47700 180.555557 text
grestore
gsave
45100 45900 44700 45900 10 line
45100 45800 44700 45800 10 line
44900 46100 44900 45900 10 line
44900 45800 44900 45600 10 line
44900 46400 44900 46100 10 line
44900 45300 44900 45600 10 line
grestore
gsave
false false false false 202.222224 [(C400) ] 0 45200 45900 180.555557 text
grestore
gsave
false false false false 202.222224 [(1.0u) ] 0 45200 45700 180.555557 text
grestore
gsave
48800 47600 48800 47300 10 line
48700 47800 48700 47600 10 line
48700 47600 48900 47600 10 line
48900 47600 48900 47800 10 line
48900 47800 48700 47800 10 line
48800 47900 100 0 360 10 darc
48800 47900 50 0 360 10 darc
grestore
gsave
false false false false 202.222224 [(TP400) ] 0 48950 47850 180.555557 text
grestore
gsave
false false false false 202.222224 [(+3.3V_aux) ] 0 48950 47664 180.555557 text
grestore
48800 47000 50100 47000 10 line
gsave
44900 43700 44900 43500 10 line
45050 43500 44750 43500 10 line
44750 43500 44900 43350 10 line
44900 43350 45050 43500 10 line
gsave
false false false false 202.222224 [(ana) ] 0 45000 43300 180.555557 text
grestore
grestore
gsave
54600 42200 54600 42000 10 line
54750 42000 54450 42000 10 line
54450 42000 54600 41850 10 line
54600 41850 54750 42000 10 line
gsave
false false false false 202.222224 [(ana) ] 0 54700 41800 180.555557 text
grestore
grestore
54600 42200 54600 42500 10 line
gsave
43100 47450 50 0 360 10 darc
43100 47400 43100 47100 10 line
gsave
false false false false 202.222224 [(Vbus) ] 0 42900 47550 180.555557 text
grestore
grestore
44900 46400 44900 46800 10 line
gsave
47700 46100 47800 46050 10 line
47800 46050 47600 45950 10 line
47600 45950 47800 45850 10 line
47800 45850 47600 45750 10 line
47600 45750 47800 45650 10 line
47800 45650 47600 45550 10 line
47600 45550 47700 45500 10 line
47700 45200 47700 45500 10 line
47700 46400 47700 46100 10 line
grestore
gsave
false false false false 202.222224 [(3.3k) ] 0 47900 45700 180.555557 text
grestore
gsave
false false false false 202.222224 [(R402) ] 0 47900 45900 180.555557 text
grestore
gsave
false false false false 202.222224 [(Rlmin) ] 0 47900 45500 180.555557 text
grestore
gsave
46600 45300 46700 45250 10 line
46700 45250 46500 45150 10 line
46500 45150 46700 45050 10 line
46700 45050 46500 44950 10 line
46500 44950 46700 44850 10 line
46700 44850 46500 44750 10 line
46500 44750 46600 44700 10 line
46600 44400 46600 44700 10 line
46600 45600 46600 45300 10 line
grestore
gsave
false false false false 202.222224 [(330k) ] 0 46800 44900 180.555557 text
grestore
gsave
false false false false 202.222224 [(R404) ] 0 46800 45100 180.555557 text
grestore
gsave
false false false false 202.222224 [(Rset) ] 0 46800 44700 180.555557 text
grestore
gsave
54600 42800 54600 42500 10 line
54500 43000 54500 42800 10 line
54500 42800 54700 42800 10 line
54700 42800 54700 43000 10 line
54700 43000 54500 43000 10 line
54600 43100 100 0 360 10 darc
54600 43100 50 0 360 10 darc
grestore
gsave
false false false false 202.222224 [(TP401) ] 0 54750 43050 180.555557 text
grestore
gsave
false false false false 202.222224 [(0V_ana) ] 0 54750 42864 180.555557 text
grestore
gsave
52300 46600 52000 46600 10 line
gsave
false true false false 202.222224 [(2) ] 0 52205 46645 180.555557 text
grestore
52300 47000 52000 47000 10 line
gsave
false true false false 202.222224 [(1) ] 0 52205 47045 180.555557 text
grestore
52300 46500 52700 46500 10 line
52700 47100 52300 47100 10 line
52300 47100 52300 46500 10 line
52700 47100 52700 46500 10 line
52500 47000 50 0 360 10 darc
52500 46601 50 0 360 10 darc
52450 47000 52300 47000 10 line
52450 46600 52300 46600 10 line
52700 47100 52800 47100 10 line
52800 47100 52800 46500 10 line
52800 46500 52700 46500 10 line
grestore
gsave
false false false false 202.222224 [(mta100) ] 0 52300 46300 180.555557 text
grestore
gsave
false false false false 202.222224 [(J400) ] 0 52300 47200 180.555557 text
grestore
gsave
52000 46100 52000 45900 10 line
52150 45900 51850 45900 10 line
51850 45900 52000 45750 10 line
52000 45750 52150 45900 10 line
gsave
false false false false 202.222224 [(ana) ] 0 52100 45700 180.555557 text
grestore
grestore
51300 47000 52000 47000 10 line
52000 46600 52000 46100 10 line
gsave
52300 44600 52000 44600 10 line
gsave
false true false false 202.222224 [(2) ] 0 52205 44645 180.555557 text
grestore
52300 45000 52000 45000 10 line
gsave
false true false false 202.222224 [(1) ] 0 52205 45045 180.555557 text
grestore
52300 44500 52700 44500 10 line
52700 45100 52300 45100 10 line
52300 45100 52300 44500 10 line
52700 45100 52700 44500 10 line
52500 45000 50 0 360 10 darc
52500 44601 50 0 360 10 darc
52450 45000 52300 45000 10 line
52450 44600 52300 44600 10 line
52700 45100 52800 45100 10 line
52800 45100 52800 44500 10 line
52800 44500 52700 44500 10 line
grestore
gsave
false false false false 202.222224 [(mta100) ] 0 52300 44300 180.555557 text
grestore
gsave
false false false false 202.222224 [(J401) ] 0 52300 45200 180.555557 text
grestore
gsave
52000 44200 52000 44000 10 line
52150 44000 51850 44000 10 line
51850 44000 52000 43850 10 line
52000 43850 52150 44000 10 line
gsave
false false false false 202.222224 [(ana) ] 0 52100 43800 180.555557 text
grestore
grestore
52000 44600 52000 44200 10 line
51300 45000 52000 45000 10 line
49800 43000 49800 47000 10 line
49800 45000 50100 45000 10 line
gsave
false false false false 202.222224 [(A) ] 0 53000 39800 180.555557 text
grestore
gsave
50400 47000 50450 47100 10 line
50450 47100 50550 46900 10 line
50550 46900 50650 47100 10 line
50650 47100 50750 46900 10 line
50750 46900 50850 47100 10 line
50850 47100 50950 46900 10 line
50950 46900 51000 47000 10 line
51300 47000 51000 47000 10 line
50100 47000 50400 47000 10 line
grestore
gsave
false false false false 202.222224 [(R400) ] 0 50600 47200 180.555557 text
grestore
gsave
false false false false 202.222224 [(0.0) ] 0 50600 46700 180.555557 text
grestore
gsave
50400 45000 50450 45100 10 line
50450 45100 50550 44900 10 line
50550 44900 50650 45100 10 line
50650 45100 50750 44900 10 line
50750 44900 50850 45100 10 line
50850 45100 50950 44900 10 line
50950 44900 51000 45000 10 line
51300 45000 51000 45000 10 line
50100 45000 50400 45000 10 line
grestore
gsave
false false false false 202.222224 [(R403) ] 0 50600 45200 180.555557 text
grestore
gsave
false false false false 202.222224 [(0.0) ] 0 50600 44700 180.555557 text
grestore
gsave
43700 46800 43750 46900 10 line
43750 46900 43850 46700 10 line
43850 46700 43950 46900 10 line
43950 46900 44050 46700 10 line
44050 46700 44150 46900 10 line
44150 46900 44250 46700 10 line
44250 46700 44300 46800 10 line
44600 46800 44300 46800 10 line
43400 46800 43700 46800 10 line
grestore
gsave
false false false false 202.222224 [(R401) ] 0 43900 47000 180.555557 text
grestore
gsave
false false false false 202.222224 [(0.0) ] 0 43900 46500 180.555557 text
grestore
gsave
false false false false 202.222224 [(lt3080 in SOT-223 package has) (junction-to-ambient tempco of) (55 C/W, 125C max junction temp.) (This allows about 1A for) (5V --> 3.3V) ] 0 46800 41900 180.555557 text
grestore
gsave
false false false false 202.222224 [(100mA max output) (limited by USB) ] 0 50100 45900 180.555557 text
grestore
gsave
45900 45100 45500 45100 10 line
45900 45000 45500 45000 10 line
45700 45300 45700 45100 10 line
45700 45000 45700 44800 10 line
45700 45600 45700 45300 10 line
45700 44500 45700 44800 10 line
grestore
gsave
false false false false 202.222224 [(C402) ] 0 46000 45100 180.555557 text
grestore
gsave
false false false false 202.222224 [(3.3n) ] 0 46000 44900 180.555557 text
grestore
gsave
false false false false 202.222224 [(Cset) ] 0 46000 44700 180.555557 text
grestore
gsave
52300 42600 52000 42600 10 line
gsave
false true false false 202.222224 [(2) ] 0 52205 42645 180.555557 text
grestore
52300 43000 52000 43000 10 line
gsave
false true false false 202.222224 [(1) ] 0 52205 43045 180.555557 text
grestore
52300 42500 52700 42500 10 line
52700 43100 52300 43100 10 line
52300 43100 52300 42500 10 line
52700 43100 52700 42500 10 line
52500 43000 50 0 360 10 darc
52500 42601 50 0 360 10 darc
52450 43000 52300 43000 10 line
52450 42600 52300 42600 10 line
52700 43100 52800 43100 10 line
52800 43100 52800 42500 10 line
52800 42500 52700 42500 10 line
grestore
gsave
false false false false 202.222224 [(mta100) ] 0 52300 42300 180.555557 text
grestore
gsave
false false false false 202.222224 [(J402) ] 0 52300 43200 180.555557 text
grestore
gsave
52000 42200 52000 42000 10 line
52150 42000 51850 42000 10 line
51850 42000 52000 41850 10 line
52000 41850 52150 42000 10 line
gsave
false false false false 202.222224 [(ana) ] 0 52100 41800 180.555557 text
grestore
grestore
52000 42600 52000 42200 10 line
51300 43000 52000 43000 10 line
49800 43000 50100 43000 10 line
gsave
50400 43000 50450 43100 10 line
50450 43100 50550 42900 10 line
50550 42900 50650 43100 10 line
50650 43100 50750 42900 10 line
50750 42900 50850 43100 10 line
50850 43100 50950 42900 10 line
50950 42900 51000 43000 10 line
51300 43000 51000 43000 10 line
50100 43000 50400 43000 10 line
grestore
gsave
false false false false 202.222224 [(R405) ] 0 50600 43200 180.555557 text
grestore
gsave
false false false false 202.222224 [(0.0) ] 0 50600 42700 180.555557 text
grestore
43100 47100 43100 46800 10 line
43100 46800 43400 46800 10 line
48800 46400 48800 47300 10 line
gsave
false false false false 202.222224 [(Butterfly requires Vcc to rise at) (100 mV/ms for power-on reset.) (Make sure Cset * Rset will allow) (this.) ] 0 44000 42100 180.555557 text
grestore
newpath
48800 46800
25
0 360 arc
fill
newpath
47700 46800
25
0 360 arc
fill
newpath
48800 46800
25
0 360 arc
fill
newpath
46600 45700
25
0 360 arc
fill
newpath
46600 45700
25
0 360 arc
fill
newpath
46600 45700
25
0 360 arc
fill
newpath
44900 44300
25
0 360 arc
fill
newpath
45700 44300
25
0 360 arc
fill
newpath
46600 44300
25
0 360 arc
fill
newpath
44900 44300
25
0 360 arc
fill
newpath
47700 44300
25
0 360 arc
fill
newpath
45700 44300
25
0 360 arc
fill
newpath
45700 44300
25
0 360 arc
fill
newpath
46600 44300
25
0 360 arc
fill
newpath
46600 44300
25
0 360 arc
fill
newpath
44900 44300
25
0 360 arc
fill
newpath
44900 46800
25
0 360 arc
fill
newpath
47700 46800
25
0 360 arc
fill
newpath
47700 46800
25
0 360 arc
fill
newpath
47700 46500
25
0 360 arc
fill
newpath
47700 44300
25
0 360 arc
fill
newpath
47700 44300
25
0 360 arc
fill
newpath
47700 46500
25
0 360 arc
fill
newpath
47700 46500
25
0 360 arc
fill
newpath
48800 47000
25
0 360 arc
fill
newpath
49800 47000
25
0 360 arc
fill
newpath
48800 47000
25
0 360 arc
fill
newpath
44900 46800
25
0 360 arc
fill
newpath
44900 46800
25
0 360 arc
fill
newpath
49800 47000
25
0 360 arc
fill
newpath
49800 47000
25
0 360 arc
fill
newpath
49800 45000
25
0 360 arc
fill
newpath
49800 45000
25
0 360 arc
fill
newpath
49800 45000
25
0 360 arc
fill
newpath
48800 46800
25
0 360 arc
fill
newpath
48800 47000
25
0 360 arc
fill
showpage
%%End
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
