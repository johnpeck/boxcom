* boxcom progress
* ----------------------- Dated notes ---------------------------
** <2012-10-07 Sun> Created this project
** <2013-02-03 Sun> Rev A of USB board set to Sierra Proto
* --------------------- Specifications --------------------------
** USB board
*** Four 3.3V power outputs, one of which has current monitoring up to 100mA
*** 2-pin current monitor output
*** FTDI USB to UART part, with level translator for RS-232 levels
*** Switch header for lighted panel rocker switch
** Power outputs: +3.3V, +/15V at 100mA
** Module name programmable with remote command
** Non-volatile voltage input calibration
* ------------------------ TODO list ----------------------------
* Plan using taskjuggler
** TODO Give firmware a start date
   - Firmware needs a start date.  Then the remote commands can just depend on other tasks.
* Work on howto [3/4]
** DONE Write up how to do loopback test
** DONE Write up how to wire up Butterfly [3/3]
*** DONE Redraw Butterfly in inkscape for clipart
*** DONE Make a drawing with arrows showing where connectors get soldered
*** DONE Reverse ADC input connector
** TODO Add index for firmware functions
** TODO Add drawing of power cable for butterfly
   - 6 inches.  Page 87 of notebook.
** TODO Add drawing of Isense connection
   - 3 inches.  Page 90 of notebook.
** TODO Add drawing of binding post connection.
   - 7 inches.  Page 90 of notebook.
** Revise section on creating new remote commands
*** TODO Each remote command should have the same length
    - This is for communication time.  It shold be uniform.
* Work on chassis [3/6]
  - Mechanical drawing is [[file:implement/drawings/budbox.fig][here]].
** DONE Create an end-on view of a USB jack
** TODO Create top-down view of angle bracket
** DONE Finish cutting diagram for back panel
** DONE Get 4-40 lock washers for standoffs below butterfly
** TODO Diagram how to make a cable for the binding posts
* Work on code
** DONE Switch to correct ADC channel (4)
   - Need to figure out why this isn't reading correctly.  Is it set
     to an output?
** DONE Add log message warning that JTAG has been disabled
   - Add this inside ADC init
** DONE Remove normal log_message from code
   - Sending a string stored in RAM is not ok
** DONE Set up bx_rtc module
   - This is the Real Time Clock module.  It will consist of the
     asynchronous counter timer2.  When used with the 32.768 kHz
     crystal clock, a prescaler of 32 will give you a ms counter within 3%.
   - Timer2 is an 8-bit counter.  When you read time differences,
     you'll have to take this into account.
** DONE Set up bx_sound module
   - Speaker is connected to PB5 (OC1A).  Remember that the LED is on
     PB4 (OC0).
*** DONE Initialization must deal with timer 1
*** DONE Write sound_play( frequency (Hz), time (ms) )
    - This should set portb5 data direction
    - For right now, system will hang when playing sound (busy loop).
      Another way to do it would be to set up a 100ms interrupt and
      have a structure to keep track of the sound generator's state.
      Starting the tone would entail setting the frequency, and
      duration members, and clearing a "endured" variable.  When the
      100ms interrupt fires, you compare the duration and endured
      variables, incrementing the endured variable.  When the endured
      and duration variables are the same, you stop the sound.
    - Another way to do this would be to create a tone list in flash,
      with each list element being a frequency.  A busy loop could
      play each element with a defined sample rate.
*** DONE Make the sound array player play every 100ms
** TODO Set up LED module
   - The LED is on PB4 (OC0).  This module will just turn the LED on
     and off.  There's no need to provide a blink function.  This will
     keep timer0 free.
**
** TODO Set up current module
   - Provides functions to turn counts from the ADC into mA or micro
     amps.  Provides ways to set calibration constants with remote
     commands.  Maybe this could be called the imeas module.  Provides
     ways to write calibration coefficients to eeprom, and to extract them.
** TODO Set up eeprom module
   - Implement an eeprom read function.
* TODO Work on makefile for usb board schematics [6/7]
** DONE We need a "pcb" target to run gsch2pcb
   - This will also need to create the project file.
** DONE kitgen must take the list of schematics from standard input
   - This is the way to use it with a makefile.
** DONE Renumber components on each page
** DONE We need a "kit" target to create a kit
** DONE We need an "edit" target to edit all schematic pages
** DONE We need a "netlist" target to create the netlist for PCB
** TODO Add makefile target to copy assembly list to website
* TODO Work on makefile for butterfly board schematics [1/1]
** DONE Create this makefile
* Work on Butterfly board [8/8]
** DONE Fill kit 16
** DONE Make a drawing in the howto showing connections
*** DONE Show show connection to ADC7 at PF4 (J401 pins 1 and 2) 
** DONE Make a drawing showing how to make the USART cable
   DEADLINE: <2013-03-19 Tue>
** DONE Make a UART cable
   DEADLINE: <2013-03-25 Mon>
** DONE Add power and UART connections to butterfly
   DEADLINE: <2013-03-25 Mon>
** DONE Make power and ADC cables for Butterfly
   DEADLINE: <2013-03-26 Tue>
** DONE Make sure toolchain is installed
** DONE Increase USART baud
* TODO Work on USB board layout [20/23]
** DONE Compare 22 and 25 gauge needle soldering
   DEADLINE: <2013-02-25 Mon>
   - Compare the force needed to draw a line of solder across some SO-16 pins.  I think the problem I'm having with the SSOP-28 part is that I'm trying to draw too fast to thin out the solder line.  Drawing too fast results in leaving gaps in the solder.
** DONE Create assembly plan that lets you test FTDI part before you finish assembly 
** DONE Create makefile target for editing
   - Should include all the command-line options you want
** DONE Decide on board outline
*** <2012-11-27 Tue> Trying 2.5-inch square
*** <2012-11-29 Thu> Decided on 2.5 x 2.75 outline
** DONE Find out if the ft232r part is connected directly to D+ and D-
   - It is.  Look at the ft232r evaluation board schematics.
** DONE Make blog post about multi-line bash commands and their comments
** DONE Place components on rs232io page
** DONE Place components on auxiliary power page
** DONE Place components on monitored power page
** DONE Position and label mta100 connectors
** DONE Decide on where to host schematics and layout for boxcom
   - These will go in a static directorty on the johnpeck site.  See the boxcom.rst draft I've made.
** TODO Add makefile target to copy silkprint over to website
** DONE Add part number and rev code to top silk
** DONE Add ground plane to layout.  I'll make a 4-layer board.
** DONE Route power to ftdi part
** DONE Route power to rs232 transceiver
** DONE Route power to U500 (current monitor)
** DONE Route the U400 and U501 voltage regulators
** DONE Prepare gerber export target for makefile
** DONE Follow checklist.org to check over gerbers output to output directory
** TODO Things to check when the board gets back
*** TODO Did the solder mask make it between pins on U300?
** TODO Make a diagram in xfig showing what each of the numbers mean in 4_40_mthole_fat.fp
** DONE Submit board to Sierra
* TODO Work on USB board [5/5]
** DONE Fill kit 14 for two boards
** DONE Make sure all parts have vendor entries
** DONE Create a "boards" category for symbols
   - Circuit boards will go in here.
*** TODO Move the boxcom circuit board to this directory, replace it in the schematics
** DONE Create a "pcb_features" category for symbols
   - Things like mounting holes with big annular rings will go in here.
*** TODO Move the 4_40 mounting hole symbol to this directory, replace it in the schematics.
*** TODO Create the paste format for digikey
** DONE Fill kit 15 for four boards
*** DONE Create kit 15
*** DONE Digi-Key parts go into baggies
    DEADLINE: <2013-03-03 Sun>
** TODO Fill kit 15a for 1 board (from kit 15)
* TODO Work on functional drawing [1/2]
  - Functional drawing is [[file:implement/drawings/functional.fig][here]].
** DONE Add current monitor
** TODO Use functional drawing to name schematic pages
* DONE Work on mechanical power switch [2/2]
** DONE Create schematic part for switch (21-1)
** DONE Create 4-pin mta100 footprint for switch.
   - The 4-pin header (14-12) is currently using the wrong footprint.  Modify the 2pin_mta100_pol.fp footprint to take 4 pins.  Follow instructions in the howto for modifying footprints.
