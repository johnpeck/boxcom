* boxcom progress
* ----------------------- Dated notes ---------------------------
* <2012-10-07 Sun> Created this project
* <2013-02-03 Sun> Rev A of USB board set to Sierra Proto
* <2013-10-26 Sat> Discussion of lt6106 current measurment
  - Use of the lt6106 to measure current involves 6 parts: 4
    resistors, one capacitor, and the lt6106 (sot23-6).  The currents
    I expect to see for a microphone are 160uA max, and a 60ohm sense
    resistor would give me a 10mV drop when flowing 160uA.  The
    problem would be if you wanted to skip a zero-point calibration.
    The lt6106 has up to 350uV of offset voltage, which is the error
    voltage on the voltage measured over the sense resistor.  So 350uV
    would be 3.5% of the voltage when flowing 160uV over a 60ohm
    resistor.  This error could be reduced by measuring the offset at
    no current flow, or by increasing the sense resistor.
* --------------------- Specifications --------------------------
** USB board
*** Four 3.3V power outputs, one of which has current monitoring up to 100mA
*** 2-pin current monitor output
*** FTDI USB to UART part, with level translator for RS-232 levels
*** Switch header for lighted panel rocker switch
** Power outputs: +3.3V, +/15V at 100mA
** Module name programmable with remote command
** Non-volatile voltage input calibration
* ------------------------ TODO list ----------------------------
* Work on demo
** TODO Program second boxcom to be load
   DEADLINE: <2013-07-08 Mon>
   - The second boxcom should just blink an LED with a period of 1s --
     so on for 1/2 second and off for 1/2 second.  Easiest way to do
     this is to set curper to 500 for the second unit.
* Work on firmware
** TODO Add command to generate time stamped data
   - I guess data would come out comma delimited: time (ms), current
     (us).  The command could be called curpkt? for current packet.
** DONE Write a function to write serial number
** DONE Add command to write serial number
** DONE Modify *idn? to get actual serial number
** DONE Make sampling period a variable
   - Call the command that sets this curper.  
** DONE Add curper command to howto
** DONE Add curper query
   - Change documentation afterwards
** DONE Better limit checking for curper
   - Lower limit should probably be 10ms.  
** DONE Change argument used by logreg command
   - I don't want the user using hex arguments
** DONE Get rid of vslope command
** DONE Get rid of voffset command
** DONE Change name of vcounts to be adccnt
   - This shold be made a dollar command
** DONE ADC measurements written to array in main()
   - See page 98 of notebook.  I'll need to define a measurement array
     in the main module to hold data coming in.  The size of the array
     should be set with a #define.  The main loop should write to this
     array on a schedule so that it contains the latest and n previous
     measurements.
** DONE Current calibration applied in current_process_array function
** DONE Change loglevel to loglev
   - Also add this command to the howto
** DONE Hello function becomes *idn
   - Write the function for the command to call in the command module.
*** *IDN? output
    - johnpeck (the company)
    - bx100 (the instrument name)
    - sn001 (the serial number)
    - 0.0.1 (the release number)
    - These numbers should be set in bx_main
** DONE Add log message warning that JTAG has been disabled
   - Add this inside ADC init
** DONE Remove normal log_message from code
   - Sending a string stored in RAM is not ok
** DONE Set up bx_rtc module
   - This is the Real Time Clock module.  It will consist of the
     asynchronous counter timer2.  When used with the 32.768 kHz
     crystal clock, a prescaler of 32 will give you a ms counter within 3%.
   - Timer2 is an 8-bit counter.  When you read time differences,
     you'll have to take this into account.
** DONE Set up bx_sound module
   - Speaker is connected to PB5 (OC1A).  Remember that the LED is on
     PB4 (OC0).
*** DONE Initialization must deal with timer 1
*** DONE Write sound_play( frequency (Hz), time (ms) )
    - This should set portb5 data direction
    - For right now, system will hang when playing sound (busy loop).
      Another way to do it would be to set up a 100ms interrupt and
      have a structure to keep track of the sound generator's state.
      Starting the tone would entail setting the frequency, and
      duration members, and clearing a "endured" variable.  When the
      100ms interrupt fires, you compare the duration and endured
      variables, incrementing the endured variable.  When the endured
      and duration variables are the same, you stop the sound.
    - Another way to do this would be to create a tone list in flash,
      with each list element being a frequency.  A busy loop could
      play each element with a defined sample rate.
*** DONE Make the sound array player play every 100ms
** DONE Set up LED module
   - The LED is on PB4 (OC0).  This module will just turn the LED on
     and off.  There's no need to provide a blink function.  This will
     keep timer0 free.
**
** DONE Set up eeprom module
   - Implement an eeprom read function.
** DONE Plan cal module
   - The cal module will have a master structure of cal values.  It
     will have a function that will return a pointer to this
     structure.  That pointer can be used by the individual modules to
     set their individual cal values.
   - What types are pointers in the AVR?  Doesn't matter.  The
     function that returns the pointer will have the type of pointer
     to cal structure.
** DONE Write up how calibration factors will be managedj
** DONE Make a variable current_cal scoped global to current module
*** TODO Make a structure to define the current cal type
    - Call this current_cal_t
*** TODO Make a variable with the type current_cal_t
    - Call this current_cal
*** TODO Make a pointer to the current calibration
    - Call this current_cal_ptr.  This pointer will be passed to the
      calibration module to have its members initialized.  I guess
      this should happen in the current module's init function.  The
      function in the calibration module should be called load_current_cal
** DONE Write function to load current calibration factors (in cal module)
   - Call this load_current_cal
   - Pulls calibration factors out of eeprom, processes them, and
     writes members of the calibration structure.
   - First step could be to just report values back to stdout
   - Getting calibration constants will involve the interested module
     sending an address for a calibration structure to the calibration
     module.  The calibration module will then fill in the constants.
     So...the interested module will need to communicate the structure
     of the calibration constant to the calibration module.
     Basically, the interested module should tell the calibration
     module how to fill in the calibration struture.  But only the
     calibration module should talk to eeprom.
** DONE Write function to write current slope (in cal module)
   DEADLINE: <2013-05-13 Mon>
   - Slope will be a 16-bit signed integer.  The function will have to
     break this up according to the cal factor structure.
** DONE Write remote command to write current slope
   - Call this $curslp
** DONE Write function to write current offset (in cal module)
   - Offset will be a 16-bit signed integer.  The function will have
     to break this up according to the cal factor structure.
** DONE Write remote command to write current offset
   - Call this $curoff
** DONE Write function to write current offset
** DONE Add command handler for 16-bit integers
   - Call this int16.  The atoi function converts numbers from 0 to
     65535 correctly for unsigned integers, and -32767 to 32767 for
     signed integers.  It looks like it's ok to just cast the output
     however you like.  For example, if you want 16-bit unsigned, it's
     ok to save the output to a uint16_t.
** DONE Add a warning sound
* Work on host software
** TODO Add reset and start key to plot
** DONE Pressing enter in the command entry box should send command
** DONE Get software to fit on laptop screen
** TODO Try creating executable
** DONE Start/stop key should be below plot
** DONE Connection radiobox should be in a section
   - The section should have a title like: Connection port
** DONE Y axis ma should be limited to 3 decimal places
** DONE Stop and start keys should just be one key -- a toggle.
   - The symbol on this key should change from a pause to a play
** DONE Make room for y axis label
** DONE Add crosshairs to read current
** DONE x axis tic labels are seconds -- not milliseconds
** DONE Add x axis label
** DONE Add random data input for dummy port
* Work on howto [15/20]
** DONE Write an overview section
** TODO Add a host software section
** DONE Make sure every remote command is in the howto
** TODO Add a description for *idn
** TODO Add a description for $curslp
** TODO Add a description for $curoff
** DONE Describe how to calibrate
   - See page 106 of notebook
** DONE Document $curoff command
   - This command now takes a signed uA argument
** TODO Do something about the noise on ms scale
   - I might try keeping two more bits when I take my average.  Right
     now, my average isn't really dealing with the LSB -- the bitshift
     I'm using for my divide just throws away any remainder.  But, if
     I keep the factor of 4 in the average instead of dividing it out,
     I can keep those extra bits.  What if I change the averaging
     factor?  Well, I can always add a bitshift that makes the sum a
     constant factor of 4 too big.
** DONE Add butterfly board schematics to howto
** DONE Document curout? command
** DONE Document the logreg function
** DONE Write up how to do loopback test
** DONE Write up how to wire up Butterfly [3/3]
*** DONE Redraw Butterfly in inkscape for clipart
*** DONE Make a drawing with arrows showing where connectors get soldered
*** DONE Reverse ADC input connector
** DONE Add drawing of power cable for butterfly
   - 6 inches.  Page 87 of notebook.
** DONE Add drawing of Isense connection
   - 3 inches.  Page 90 of notebook.
** DONE Add drawing of binding post connection.
   - 7 inches.  Page 90 of notebook.
** DONE Add firmware section describing received character flow
** DONE Add firmware section describing how commands are executed
** DONE Document how output current calibration works
** Revise section on creating new remote commands
*** TODO Each remote command should have the same length
    - This is for communication time.  It shold be uniform.
*** TODO Remote command argument types must be in structure
    - command_arg_struct in command.h must contain the argument type
      defined for the remote command.  The function command_exec must
      know how to deal with the argument type to send it on to a
      function.
* Plan using taskjuggler
** TODO Give firmware a start date
   - Firmware needs a start date.  Then the remote commands can just depend on other tasks.
* Work on chassis [4/5]
  - Mechanical drawing is [[file:implement/drawings/budbox.fig][here]].
** DONE Create an end-on view of a USB jack
** TODO Create top-down view of angle bracket
** DONE Finish cutting diagram for back panel
** DONE Get 4-40 lock washers for standoffs below butterfly
** DONE Diagram how to make a cable for the binding posts
** Work on sticker
*** TODO Sticker gets revision directory
*** TODO Add instructions for connecting with Python
    - This all goes on the right side of the face
*** DONE Move 3.3V label down 1/8 inch
*** TODO Add maximum current output label
* Work on calibration
** TODO Calibrate using a 1k resistor
* TODO Work on makefile for usb board schematics [6/7]
** DONE We need a "pcb" target to run gsch2pcb
   - This will also need to create the project file.
** DONE kitgen must take the list of schematics from standard input
   - This is the way to use it with a makefile.
** DONE Renumber components on each page
** DONE We need a "kit" target to create a kit
** DONE We need an "edit" target to edit all schematic pages
** DONE We need a "netlist" target to create the netlist for PCB
** TODO Add makefile target to copy assembly list to website
* TODO Work on makefile for butterfly board schematics [1/1]
** DONE Create this makefile
* Work on Butterfly board [8/8]
** DONE Fill kit 16
** DONE Make a drawing in the howto showing connections
*** DONE Show show connection to ADC7 at PF4 (J401 pins 1 and 2) 
** DONE Make a drawing showing how to make the USART cable
   DEADLINE: <2013-03-19 Tue>
** DONE Make a UART cable
   DEADLINE: <2013-03-25 Mon>
** DONE Add power and UART connections to butterfly
   DEADLINE: <2013-03-25 Mon>
** DONE Make power and ADC cables for Butterfly
   DEADLINE: <2013-03-26 Tue>
** DONE Make sure toolchain is installed
** DONE Increase USART baud
* TODO Work on USB board layout [20/23]
** DONE Compare 22 and 25 gauge needle soldering
   DEADLINE: <2013-02-25 Mon>
   - Compare the force needed to draw a line of solder across some SO-16 pins.  I think the problem I'm having with the SSOP-28 part is that I'm trying to draw too fast to thin out the solder line.  Drawing too fast results in leaving gaps in the solder.
** DONE Create assembly plan that lets you test FTDI part before you finish assembly 
** DONE Create makefile target for editing
   - Should include all the command-line options you want
** DONE Decide on board outline
*** <2012-11-27 Tue> Trying 2.5-inch square
*** <2012-11-29 Thu> Decided on 2.5 x 2.75 outline
** DONE Find out if the ft232r part is connected directly to D+ and D-
   - It is.  Look at the ft232r evaluation board schematics.
** DONE Make blog post about multi-line bash commands and their comments
** DONE Place components on rs232io page
** DONE Place components on auxiliary power page
** DONE Place components on monitored power page
** DONE Position and label mta100 connectors
** DONE Decide on where to host schematics and layout for boxcom
   - These will go in a static directorty on the johnpeck site.  See the boxcom.rst draft I've made.
** TODO Add makefile target to copy silkprint over to website
** DONE Add part number and rev code to top silk
** DONE Add ground plane to layout.  I'll make a 4-layer board.
** DONE Route power to ftdi part
** DONE Route power to rs232 transceiver
** DONE Route power to U500 (current monitor)
** DONE Route the U400 and U501 voltage regulators
** DONE Prepare gerber export target for makefile
** DONE Follow checklist.org to check over gerbers output to output directory
** TODO Things to check when the board gets back
*** TODO Did the solder mask make it between pins on U300?
** TODO Make a diagram in xfig showing what each of the numbers mean in 4_40_mthole_fat.fp
** DONE Submit board to Sierra
* TODO Work on USB board [5/5]
** TODO Fix problem with rebooting after short output
   - Shorting the monitored current output also shorts the voltage to the butterfly.  This shouldn't happen.  
** DONE Fill kit 14 for two boards
** DONE Make sure all parts have vendor entries
** DONE Create a "boards" category for symbols
   - Circuit boards will go in here.
*** TODO Move the boxcom circuit board to this directory, replace it in the schematics
** DONE Create a "pcb_features" category for symbols
   - Things like mounting holes with big annular rings will go in here.
*** TODO Move the 4_40 mounting hole symbol to this directory, replace it in the schematics.
*** TODO Create the paste format for digikey
** DONE Fill kit 15 for four boards
*** DONE Create kit 15
*** DONE Digi-Key parts go into baggies
    DEADLINE: <2013-03-03 Sun>
** TODO Fill kit 15a for 1 board (from kit 15)
* TODO Work on functional drawing [1/2]
  - Functional drawing is [[file:implement/drawings/functional.fig][here]].
** DONE Add current monitor
** TODO Use functional drawing to name schematic pages
* DONE Work on mechanical power switch [2/2]
** DONE Create schematic part for switch (21-1)
** DONE Create 4-pin mta100 footprint for switch.
   - The 4-pin header (14-12) is currently using the wrong footprint.  Modify the 2pin_mta100_pol.fp footprint to take 4 pins.  Follow instructions in the howto for modifying footprints.
